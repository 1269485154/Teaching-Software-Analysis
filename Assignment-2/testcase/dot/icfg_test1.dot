digraph "ICFG" {
	label="ICFG";

	Node0x103812410 [shape=record,color=black,label="{NodeID: 27\nIntraBlockNode ID: 27   br label %while.cond \{fun: main\}}"];
	Node0x103812410 -> Node0x1038111b0[style=solid];
	Node0x103812290 [shape=record,color=black,label="{NodeID: 26\nIntraBlockNode ID: 26   store i32 %inc, i32* %a, align 4 \{fun: main\}}"];
	Node0x103812290 -> Node0x103812410[style=solid];
	Node0x103812050 [shape=record,color=black,label="{NodeID: 25\nIntraBlockNode ID: 25   %inc = add nsw i32 %1, 1 \{fun: main\}}"];
	Node0x103812050 -> Node0x103812290[style=solid];
	Node0x1038109a0 [shape=record,color=green,label="{NodeID: 24\nFunExitBlockNode ID: 24 Exit(\{  \})\n \{fun: main\}}"];
	Node0x103811be0 [shape=record,color=black,label="{NodeID: 23\nIntraBlockNode ID: 23   %1 = load i32, i32* %a, align 4 \{fun: main\}}"];
	Node0x103811be0 -> Node0x103812050[style=solid];
	Node0x103811a60 [shape=record,color=black,label="{NodeID: 22\nIntraBlockNode ID: 22   ret i32 0 \{fun: main\}}"];
	Node0x103811a60 -> Node0x1038109a0[style=solid];
	Node0x103811860 [shape=record,color=blue,label="{NodeID: 21\nRetBlockNode ID: 21   call void @src(i32* %a) \{fun: main\}}"];
	Node0x103811860 -> Node0x103811be0[style=solid];
	Node0x103811720 [shape=record,color=red,label="{NodeID: 20\nCallBlockNode ID: 20   call void @src(i32* %a) \{fun: main\}|{|<s1>0x103807a00}}"];
	Node0x103811720 -> Node0x103811860[style=solid];
	Node0x103811720:s1 -> Node0x103807c00[style=solid,color=red];
	Node0x1038114e0 [shape=record,color=black,label="{NodeID: 19\nIntraBlockNode ID: 19   br i1 %cmp, label %while.body, label %while.end \{fun: main\}}"];
	Node0x1038114e0 -> Node0x103811720[style=solid];
	Node0x1038114e0 -> Node0x103811a60[style=solid];
	Node0x103811390 [shape=record,color=black,label="{NodeID: 18\nIntraBlockNode ID: 18   %cmp = icmp sle i32 %0, 1 \{fun: main\}}"];
	Node0x103811390 -> Node0x1038114e0[style=solid];
	Node0x1038111b0 [shape=record,color=black,label="{NodeID: 17\nIntraBlockNode ID: 17   %0 = load i32, i32* %a, align 4 \{fun: main\}}"];
	Node0x1038111b0 -> Node0x103811390[style=solid];
	Node0x103811030 [shape=record,color=black,label="{NodeID: 16\nIntraBlockNode ID: 16   br label %while.cond \{fun: main\}}"];
	Node0x103811030 -> Node0x1038111b0[style=solid];
	Node0x103810eb0 [shape=record,color=black,label="{NodeID: 15\nIntraBlockNode ID: 15   store i32 1, i32* %a, align 4 \{fun: main\}}"];
	Node0x103810eb0 -> Node0x103811030[style=solid];
	Node0x103810d00 [shape=record,color=black,label="{NodeID: 14\nIntraBlockNode ID: 14   store i32 0, i32* %retval, align 4 \{fun: main\}}"];
	Node0x103810d00 -> Node0x103810eb0[style=solid];
	Node0x103810b50 [shape=record,color=black,label="{NodeID: 13\nIntraBlockNode ID: 13   %a = alloca i32, align 4 \{fun: main\}AddrPE: [4294967278\<--9]    %a = alloca i32, align 4\{  \}}"];
	Node0x103810b50 -> Node0x103810d00[style=solid];
	Node0x103810a90 [shape=record,color=black,label="{NodeID: 12\nIntraBlockNode ID: 12   %retval = alloca i32, align 4 \{fun: main\}AddrPE: [4294967279\<--8]    %retval = alloca i32, align 4\{  \}}"];
	Node0x103810a90 -> Node0x103810b50[style=solid];
	Node0x103810900 [shape=record,color=yellow,label="{NodeID: 11\nFunEntryBlockNode ID: 11 Entry(\{  \})\n \{fun: main\}}"];
	Node0x103810900 -> Node0x103806640[style=solid];
	Node0x103810900 -> Node0x103810a90[style=solid];
	Node0x103810750 [shape=record,color=black,label="{NodeID: 10\nIntraBlockNode ID: 10   ret void \{fun: sink\}}"];
	Node0x103810750 -> Node0x103810270[style=solid];
	Node0x103810630 [shape=record,color=green,label="{NodeID: 9\nFunExitBlockNode ID: 9 Exit(\{  \})\n \{fun: src\}|{<s0>0x103807a00}}"];
	Node0x103810630:s0 -> Node0x103811860[style=solid,color=blue];
	Node0x103810450 [shape=record,color=black,label="{NodeID: 8\nIntraBlockNode ID: 8   ret void \{fun: src\}}"];
	Node0x103810450 -> Node0x103810630[style=solid];
	Node0x103810270 [shape=record,color=green,label="{NodeID: 7\nFunExitBlockNode ID: 7 Exit(\{  \})\n \{fun: sink\}|{<s0>0x103806f98}}"];
	Node0x103810270:s0 -> Node0x1038101d0[style=solid,color=blue];
	Node0x1038101d0 [shape=record,color=blue,label="{NodeID: 6\nRetBlockNode ID: 6   call void @sink() \{fun: src\}}"];
	Node0x1038101d0 -> Node0x103810450[style=solid];
	Node0x103810070 [shape=record,color=yellow,label="{NodeID: 5\nFunEntryBlockNode ID: 5 Entry(\{  \})\n \{fun: sink\}}"];
	Node0x103810070 -> Node0x103810750[style=solid];
	Node0x10380ffc0 [shape=record,color=red,label="{NodeID: 4\nCallBlockNode ID: 4   call void @sink() \{fun: src\}|{|<s1>0x103806f98}}"];
	Node0x10380ffc0 -> Node0x1038101d0[style=solid];
	Node0x10380ffc0:s1 -> Node0x103810070[style=solid,color=red];
	Node0x10380fea0 [shape=record,color=black,label="{NodeID: 3\nIntraBlockNode ID: 3   store i32* %s, i32** %s.addr, align 8 \{fun: src\}StorePE: [4294967288\<--4294967289]    store i32* %s, i32** %s.addr, align 8\{  \}}"];
	Node0x10380fea0 -> Node0x10380ffc0[style=solid];
	Node0x10380fdb0 [shape=record,color=black,label="{NodeID: 2\nIntraBlockNode ID: 2   %s.addr = alloca i32*, align 8 \{fun: src\}AddrPE: [4294967288\<--5]    %s.addr = alloca i32*, align 8\{  \}}"];
	Node0x10380fdb0 -> Node0x10380fea0[style=solid];
	Node0x103807c00 [shape=record,color=yellow,label="{NodeID: 1\nFunEntryBlockNode ID: 1 Entry(\{  \})\n \{fun: src\}}"];
	Node0x103807c00 -> Node0x10380fdb0[style=solid];
	Node0x103806640 [shape=record,color=purple,label="{NodeID: 0\nCopyPE: [2\<--3]  i8* null\{ Can only get source location for instruction, argument, global var or function. \}AddrPE: [4294967291\<--4]  ; Function Attrs: noinline nounwind optnone uwtable\ndefine dso_local void @src(i32* %s) #0 \{\nentry:\n  %s.addr = alloca i32*, align 8\n  store i32* %s, i32** %s.addr, align 8\n  call void @sink()\n  ret void\n\}\n\{  \}AddrPE: [4294967285\<--6]  ; Function Attrs: noinline nounwind optnone uwtable\ndefine dso_local void @sink() #0 \{\nentry:\n  ret void\n\}\n\{  \}AddrPE: [4294967281\<--7]  ; Function Attrs: noinline nounwind optnone uwtable\ndefine dso_local i32 @main() #0 \{\nentry:\n  %retval = alloca i32, align 4\n  %a = alloca i32, align 4\n  store i32 0, i32* %retval, align 4\n  store i32 1, i32* %a, align 4\n  br label %while.cond\n\nwhile.cond:                                       ; preds = %while.body, %entry\n  %0 = load i32, i32* %a, align 4\n  %cmp = icmp sle i32 %0, 1\n  br i1 %cmp, label %while.body, label %while.end\n\nwhile.body:                                       ; preds = %while.cond\n  call void @src(i32* %a)\n  %1 = load i32, i32* %a, align 4\n  %inc = add nsw i32 %1, 1\n  store i32 %inc, i32* %a, align 4\n  br label %while.cond\n\nwhile.end:                                        ; preds = %while.cond\n  ret i32 0\n\}\n\{  \}}"];
}
